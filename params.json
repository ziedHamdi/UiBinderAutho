{"name":"UiBinderAutho","tagline":"GWT UiBinder authorization code : how is it thought, and what is  ready to use?","body":"### Welcome to UiBinderAutho the automatic part of the UiBinderAuth project.\r\nThis project is a concrete implementation that uses the low level feature added by [UiBinderAuth](https://github.com/ziedHamdi/UiBinderAuth). While the [UiBinderAuth](https://github.com/ziedHamdi/UiBinderAuth) is a fork of the GWT UiBinder with added abilities, this project is a base framework to use that added code interception feature.\r\n\r\nNote: at the current state, the API and the \"test classes\" are mixed together because this project is aimed to be a demo. You can however reuse a lot of classes and interfaces in this code. In any case you'll be obliged to download the sources and adjust the code for your needs. So consider it as a scaffold project for now\r\n\r\nThe main classes you should look at are the following:\r\n```\r\n1.  ProfileSpecificWidgetCreator which contains the logic on how to change the look of any widget\r\n2.  fr.onevu.auth.server.auth.Profile you'll have to change this server side class that specifies the behavior of your widgets (this is typically a check of the connected profile, then a database reading of the settings associated to the profile roles)\r\n3.  /Auth/war/profile.jsp this file uses the answer of the server class Profile to load the settings into the page. You must do a <%@include file=\"profile.jsp\" %> in your module html file to be able to grab the info from the server.\r\n```\r\n\r\nThis code is the key to understand the initialization process, it's the Module startup code\r\n\r\n```\r\npublic class Auth implements EntryPoint {\r\n\tpublic void onModuleLoad() {\r\n\t\tRootPanel profilePanel = RootPanel.get(\"profile\");\r\n\t\tif (profilePanel == null)\r\n\t\t\treturn;\r\n\r\n\t\tString rulesJson = profilePanel.getElement().getInnerHTML().trim();\r\n\t\tif (rulesJson == null || 0 == rulesJson.length())\r\n\t\t\treturn;\r\n\r\n\t\tProfileWidgetJsonSerializer jsonSerializer = new ProfileWidgetJsonSerializer();\r\n\r\n//here the rules get injected to the client : you can start using UiBinder from now\t\r\n\t\r\n      ProfileSpecificWidgetCreator.setProfileWidgetRules(jsonSerializer.deserializeFromJson(rulesJson));\r\n\r\n**//by inheriting this module, you can be sure when it comes to your code, all is correctly initialized**\r\n}\r\n```\r\n\r\n\r\n###Deeper reading\r\n\r\nThis project is a default implementation of UiBinderAuth, it is in this separate project because it provides some data structure to hold the abstract concepts in [UiBinderAuth] (https://github.com/ziedHamdi/UiBinderAuth)\r\n\r\nClasses declared in this project can be directly reused/extended in your project. You'll have to implement the service that tells the client which field of which UiBinder file has to be handled specifically for the connected user. The server knows who is connected on the other side of the lane, so it can give display directives on GWT application startup. If the user connects or has rule changes, a page reload will be necessary. But this kind of changes is rare enough to justify a page reload.\r\n\r\nCases where the widgets display may be impacted in an application wide context are for example: \r\n\r\n* a user with a certain role (manager, visitor, none, administrator)\r\n* a user loosing access to some features (eg. credit insufficient, administrator forbidding functionality to a given user, etc...) \r\n* a user decides to change the styles (personalize his 'desktop' theme)\r\n* the application state changes (maintenance) and allows restricted access\r\n* a bonus temporary feature for the user (for his birthday :-) )\r\n* add tooltips and helps to widgets if the user is new to the platform\r\n* notify the user of warning states on login (that may be consumed after)\r\n\r\nSince the library UiBinderAuth is specialized in UiBinder interception, it will not natively work with manually created widgets. But we strongly recommend that each created widget passes through the gateway method ContextSpecificWidgetCreator#init(). This will allow to have a uniform authorization handling controller. This can be achieved through the ClienFactory pattern that is anyway recommended.\r\n\r\nLater, this library might include a widget cache, that will make it possible to provide runtime services (as opposed to startup services):\r\n\r\n* adding handlers to detect EventBus events related to Widget display mode and update the cached visible widgets\r\n* react asynchoneously by asking to update the information relative to the role/ as display information\r\n* provide an interface with the available widget 'namepsaces' (UiBinder file + field || hand written scope + field) to edit the widget attributes\r\n* allow to display validation messages next to the concerned widget in a central manner (if a widget is detected to have validation issues, it is get from cache and manipulated to display a message next to it)\r\nYour help and suggestions are naturally welcome","google":"UiBinderAutho","note":"Don't delete this file! It's used internally to help with page regeneration."}